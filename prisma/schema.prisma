generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEFAULT
  ADMIN
  DRIVER
  CUSTOMER
}

// MODEL USER AND ITS DETAIL
model User {
  user_id                  String                    @id @default(uuid())
  email                    String
  password                 String
  otp                      String                    @default("000")
  role                     Role
  user_detail              UserDetail?
  driver_detail            DriverDetail?
  customer_detail          CustomerDetail?
  term                     Term?
  customer_order_header    CustomerOrderHeader[]
  realtime_location        RealtimeLocation?
  driver_order_header      DriverOrderHeader[]
  chat_message             ChatMessage[]
  admin_time_block         AdminTimeBlock[]
  notification             Notification[]
  user_notification_device UserNotificationDevices[]
  created_at               DateTime                  @default(now())
}

model UserNotificationDevices {
  user_notification_device_id String @id @default(uuid())
  user_id                     String
  user                        User?  @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  push_token                  String
}

model Notification {
  notification_id String   @id @default(uuid())
  user_id         String
  content         String
  is_read         Boolean  @default(false)
  user            User?    @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  created_at      DateTime @default(now())
}

model CustomerDetail {
  user_id      String @id
  binusian_id  String
  parent_phone String
  user         User?  @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
}

model UserDetail {
  user_id           String   @id
  profile_image     String
  phone             String   @unique
  name              String
  street            String
  grade             Int
  is_admin_approved Boolean  @default(false)
  is_email_verified Boolean  @default(false)
  is_phone_verified Boolean  @default(false)
  User              User?    @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  updated_at        DateTime @updatedAt
}

model DriverDetail {
  user_id              String   @id
  vehicle_image        String
  vehicle_category     String
  vehicle_model        String
  vehicle_capacity     Int
  vehicle_number_plate String
  child_name           String?
  child_binusian_id    String?
  child_grade          String?
  user                 User?    @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  payment_id           String?  @unique
  payment              Payment? @relation(fields: [payment_id], references: [payment_id], onUpdate: Cascade, onDelete: Cascade)
  updated_at           DateTime @updatedAt
}

model Payment {
  payment_id     String        @id @default(uuid())
  name           String
  account_number String
  driver_detail  DriverDetail?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Term {
  user_id    String   @id
  role       Role
  is_agree   Boolean  @default(false)
  user       User?    @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  term_text  TermText @relation(fields: [role], references: [role], onUpdate: Cascade, onDelete: Cascade)
  created_at DateTime @default(now())
}

model TermText {
  role       Role     @id
  terms      Term[]
  text       String
  created_at DateTime @default(now())
}

model RealtimeLocation {
  user_id   String   @id
  date      DateTime
  latitude  Decimal
  longitude Decimal
  user      User?    @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  location  String
}

model DriverOrderHeader {
  order_id              String                @id @default(uuid())
  driver_id             String
  time_block_id         String
  is_admin_approved     Boolean               @default(false)
  is_ongoing            Boolean               @default(false)
  customer_order_header CustomerOrderHeader[]
  user                  User?                 @relation(fields: [driver_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  room_chat             RoomChat?
  admin_time_block      AdminTimeBlock?       @relation(fields: [time_block_id], references: [time_block_id], onUpdate: Cascade, onDelete: Cascade)
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
}

model CustomerOrderHeader {
  customer_order_id                 String                          @id @default(uuid())
  order_id                          String
  user_id                           String
  extra_passenger                   Int
  cancel_pulang                     Boolean                         @default(false)
  cancel_pergi                      Boolean                         @default(false)
  is_ongoing                        Boolean                         @default(false)
  is_driver_approved                Boolean                         @default(false)
  driver_order_header               DriverOrderHeader?              @relation(fields: [order_id], references: [order_id], onUpdate: Cascade, onDelete: Cascade)
  user                              User?                           @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  payment_header                    PaymentHeader[]
  realtime_customer_each_day_pickup RealtimeCustomerEachDayPickup[]
  created_at                        DateTime                        @default(now())
}

model RoomChat {
  order_id            String             @id
  name                String
  is_expired          Boolean            @default(false)
  driver_order_header DriverOrderHeader? @relation(fields: [order_id], references: [order_id], onUpdate: Cascade, onDelete: Cascade)
  chat_message        ChatMessage[]
  created_at          DateTime           @default(now())
}

model ChatMessage {
  chat_id    String    @id @default(uuid())
  order_id   String
  user_id    String
  message    String
  user       User?     @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  room_chat  RoomChat? @relation(fields: [order_id], references: [order_id], onUpdate: Cascade, onDelete: Cascade)
  created_at DateTime  @default(now())
}

model AdminTimeBlock {
  time_block_id       String              @id @default(uuid())
  user_id             String
  start_date          DateTime
  end_date            DateTime
  start_journey_date  DateTime
  end_journey_date    DateTime
  start_pickup        String
  end_pickup          String
  user                User?               @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  driver_order_header DriverOrderHeader[]
  created_at          DateTime            @default(now())
}

model PaymentHeader {
  distance_from_school  Int                  @default(0)
  customer_payment_id   String               @id @default(uuid())
  customer_order_id     String
  payment_proof_image   String?
  payment_total         Int
  is_admin_approved     Boolean              @default(false)
  expired_at            DateTime
  customer_order_header CustomerOrderHeader? @relation(fields: [customer_order_id], references: [customer_order_id], onUpdate: Cascade, onDelete: Cascade)
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
}

model RealtimeCustomerEachDayPickup {
  pickup_id             String               @id @default(uuid())
  customer_order_id     String
  date                  DateTime
  priority              Int
  is_jemput             Boolean              @default(true)
  is_anter              Boolean              @default(true)
  is_started            Boolean              @default(false)
  is_home_arrived       Boolean              @default(false)
  is_canceled           Boolean              @default(false)
  is_pickup             Boolean              @default(false)
  is_arrived            Boolean              @default(false)
  customer_order_header CustomerOrderHeader? @relation(fields: [customer_order_id], references: [customer_order_id], onUpdate: Cascade, onDelete: Cascade)
  start_pickup          String?
  end_pickup            String
}
